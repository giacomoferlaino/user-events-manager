swagger: "2.0"
info:
  description: "This is a simple event creation and subscription server.\n
  In this version is possible to:\n
  - sign-up\n
  - login\n
  - create users\n
  - retrieve users\n
  - update user\n
  - delete users\n
  - create events\n
  - retrieve events\n
  - update events\n
  - delete events\n
  - subscribe to events"
  version: "1.0.0"
  title: "Swagger Events Subscriber"
basePath: "/"
host: "localhost:8080"
tags:
  - name: "auth"
    description: "Sign-up and login"
  - name: "user"
    description: "Operations about user"
  - name: "event"
    description: "Operations about event"
schemes:
  - "http"
paths:
  /auth/login:
    post:
      tags:
        - "auth"
      summary: "Retrieve auth token."
      description: ""
      operationId: "authLogin"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Credentials needed to be authenticated."
          required: true
          schema:
            $ref: "#/definitions/LoginData"
      responses:
        default:
          description: "successful operation"
  /auth/signup:
    post:
      tags:
        - "auth"
      summary: "Signup as a new user."
      description: ""
      operationId: "authSignup"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "New user information."
          required: true
          schema:
            $ref: "#/definitions/SignupData"
      responses:
        default:
          description: "successful operation"
  /event:
    get:
      tags:
        - "event"
      summary: "Retrieve all events"
      operationId: "retrieveAllEvents"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
    post:
      tags:
        - "event"
      summary: "Add a new event."
      operationId: "addEvent"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Event information."
          required: true
          schema:
            $ref: "#/definitions/Event"
      security:
        - bearerAuth: []
      responses:
        default:
          description: "successful operation"
  /event/{id}:
    get:
      tags:
        - "event"
      summary: "Get event information."
      operationId: "retrieveEvent"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the event"
          required: true
          type: string
      responses:
        default:
          description: "successful operation"
    put:
      tags:
        - "event"
      summary: "Update event information."
      operationId: "updateEvent"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Event update information."
          required: true
          schema:
            $ref: "#/definitions/Event"
        - in: "path"
          name: "id"
          description: "ID of the event"
          required: true
          type: string
      security:
        - bearerAuth: []
      responses:
        default:
          description: "successful operation"
    delete:
      tags:
        - "event"
      summary: "Get event information."
      operationId: "removeEvent"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the event"
          required: true
          type: string
      security:
        - bearerAuth: []
      responses:
        default:
          description: "successful operation"
  /event/{id}/subscribe:
    post:
      tags:
        - "event"
      summary: "Get event information."
      operationId: "subscribeToEvent"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the event"
          required: true
          type: string
      security:
        - bearerAuth: []
      responses:
        default:
          description: "successful operation"
  /user:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      security:
        - bearerAuth: []
      responses:
        default:
          description: "successful operation"
    get:
      tags:
        - "user"
      summary: "Retrieve users"
      description: ""
      operationId: "retrieveUsers"
      produces:
        - "application/xml"
        - "application/json"
      parameters: []
      security:
        - bearerAuth: []
      responses:
        default:
          description: "successful operation"
  /user/{id}:
    get:
      tags:
        - "user"
      summary: "Retrieve user"
      description: ""
      operationId: "retrieveUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the user"
          required: true
          type: "string"
      security:
        - bearerAuth: []
      responses:
        default:
          description: "successful operation"
    put:
      tags:
        - "user"
      summary: "Updated user"
      description: ""
      operationId: "updateUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the user"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      security:
        - bearerAuth: []
      responses:
        default:
          description: "successful operation"
    delete:
      tags:
        - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the user"
          required: true
          type: "string"
      security:
        - bearerAuth: []
      responses:
        default:
          description: "successful operation"
definitions:
  User:
    type: "object"
    required:
      - "username"
      - "email"
      - "password"
    properties:
      username:
        type: "string"
        example: "superUser"
      email:
        type: "string"
        example: "user@test.com"
      password:
        type: "string"
        example: "password"
  LoginData:
    type: "object"
    required:
      - "email"
      - "password"
    properties:
      email:
        type: "string"
        example: "user@test.com"
      password:
        type: "string"
        example: "password"
  SignupData:
    type: "object"
    required:
      - "username"
      - "email"
      - "password"
    properties:
      username:
        type: "string"
        example: "superUser"
      email:
        type: "string"
        example: "user@test.com"
      password:
        type: "string"
        example: "password"
  Event:
    type: "object"
    required:
      - "headline"
      - "description"
      - "startDate"
      - "location"
      - "state"
    properties:
      headline:
        type: "string"
        example: "A new event!"
      description:
        type: "string"
        example: "This event will be really fun."
      startDate:
        type: "string"
        format: "date"
        example: "1970-01-01T00:00:00.000Z"
      location:
        type: "string"
        example: "Milan"
      state:
        type: "string"
        example: "public"
securityDefinitions :
  bearerAuth:
    type: apiKey
    in: header
    name: Authorization